// Sys.vm - Parity Bit Library
// Student ID: 201860766

// 1. Sys.xor: Bitwise XOR of two values
function Sys.xor 2
    push argument 0
    push argument 1
    and
    not
    
    push argument 0
    push argument 1
    or
    
    and
    return

// 2. Sys.shiftLeft: Shift left operation (x << y)
function Sys.shiftLeft 2
    push argument 0
    pop local 0           // result = x
    
    push argument 1
    pop local 1           // counter = y
    
    label SHIFT_LOOP
    push local 1
    push constant 0
    eq
    if-goto END_SHIFT
    
    push local 0
    add
    pop local 0           // result = result + result (equivalent to <<1)
    
    push local 1
    push constant 1
    sub
    pop local 1           // counter--
    
    goto SHIFT_LOOP
    label END_SHIFT
    
    push local 0
    return

// 3. Sys.computeParity: Compute parity of 15 LSBs
function Sys.computeParity 4
    push constant 0
    pop local 0           // parity = 0
    
    push constant 0
    pop local 1           // i = 0
    
    label PARITY_LOOP
    push local 1
    push constant 15
    eq
    if-goto END_PARITY
    
    // Create bitmask: 1 << i
    push constant 1
    push local 1
    call Sys.shiftLeft 2
    pop local 2           // bitmask = 1 << i
    
    // Check if bit is set
    push argument 0
    push local 2
    and
    push constant 0
    eq
    not
    if-goto BIT_SET
    
    goto NEXT_BIT
    
    label BIT_SET
    push local 0
    push constant 1
    call Sys.xor 2
    pop local 0           // parity = parity XOR 1
    
    label NEXT_BIT
    push local 1
    push constant 1
    add
    pop local 1           // i++
    
    goto PARITY_LOOP
    label END_PARITY
    
    push local 0
    return

// 4. Sys.encode: Encode 15-bit data with parity bit
function Sys.encode 2
    push argument 0
    call Sys.computeParity 1
    pop local 0           // parity = computeParity(input)
    
    // Clear MSB (bit 15)
    push argument 0
    push constant 32767   // 0x7FFF
    and
    pop local 1           // result = input & 0x7FFF
    
    // Set parity bit if needed
    push local 0
    push constant 0
    eq
    if-goto NO_PARITY_SET
    
    push local 1
    push constant 32768   // 0x8000
    or
    pop local 1           // result |= 0x8000
    
    label NO_PARITY_SET
    push local 1
    return

// Test initialization function
function Sys.init 0
    // Test Sys.xor with 12 and 6 (should be 10)
    push constant 12
    push constant 6
    call Sys.xor 2
    
    // Test Sys.shiftLeft with 6 and 2 (should be 24)
    push constant 6
    push constant 2
    call Sys.shiftLeft 2
    
    // Test Sys.computeParity with 31 (should be 1)
    push constant 31
    call Sys.computeParity 1
    
    // Test Sys.encode with sample value
    push constant 12345
    call Sys.encode 1
    
    return
    